package apriori.workflow.controller;

import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import apriori.db.AprioriConfig;
import apriori.db.AprioriConfigService;
import apriori.db.HorizontalTransaction;
import apriori.db.HorizontalTransactionService;
import apriori.logic.utility.DbUtility;
import apriori.workflow.service.ExerciseService;
import apriori.workflow.user.management.ExerciseParticipantService;

/**
 * controller class for exercise processes
 */
@Controller
public class ExerciseController {

	@Autowired
	ExerciseParticipantService repo;

	@Autowired
	HorizontalTransactionService horizontalService;

	@Autowired
	AprioriConfigService configService;

	/**
	 * for starting exercise
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param initalVar	starting condition for exercise (generated by the eTutor++)
	 * @return	reference view
	 */
	@GetMapping("/newExercise")
	public String NewExercise(Model model, @RequestParam(value = "initalVar", required = true) String initalVar) {

		Map<String, String> map = DbUtility.decryptInitialVariable(initalVar);

		if (map == null) {
			System.out.println("map==null: " + map);
			return "redirect:/sorry...?message=(Decryption failure)";
		}

		boolean check = ExerciseService.checkInitialLink(map);

		if (check == false) {
			return "redirect:/sorry...?message=(Decryption failure)";
		}

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		UUID exerciseProcessNo = repo.setupExercise(map.get("userId"), Integer.parseInt(map.get("_taskNo")),
				map.get("courseInstanceUUID"), map.get("exerciseSheetUUID"), Integer.parseInt(map.get("maxPoints")),
				map.get("taskConfigId"), map.get("difficultyLevel"));

		ExerciseService exerciseService = repo.findExercise(UUID.fromString(exerciseProcessNo.toString()));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		if (exerciseService.getApriori() == null) {

			if (configService.getAprioriConfig(exerciseService.getTaskConfigId()).size() == 0) {
				return "redirect:/sorry...?message=(Task configuration not found)";
			}

			AprioriConfig exerciseConfig = configService.getAprioriConfig(exerciseService.getTaskConfigId()).get(0);
			List<HorizontalTransaction> horizontalTransactions = horizontalService
					.findDatasetByUuid(exerciseConfig.getUuid_ht());
			exerciseService.prepareExercise(exerciseConfig, horizontalTransactions);
		}
		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNo;
	}

	/**
	 * for opening exercise page
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/aprioriExercise")
	public String aprioriTraining(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		model.addAttribute("ads", exerciseService.getHorizontalTable().getList());
		model.addAttribute("frequentList", exerciseService.getFrequentTable());
		model.addAttribute("exerciseService", exerciseService);

		return "aprioriExercise";
	}

	/**
	 * for adding an interim result row
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @param itemsInterim	items to add
	 * @param supportInterimI	support count for items to add
	 * @return	reference view
	 */
	@GetMapping("/addInterimExercise")
	public String addInterimExercise(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo,
			@RequestParam(value = "itemsInterim", required = true) String itemsInterim,
			@RequestParam(value = "supportInterimI", required = true) int supportInterimI

	) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.setNewInterimRow(itemsInterim, supportInterimI);

		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNo.toString();
	}

	/**
	 * for adding frequent items row
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @param itemsFrequent	items to add
	 * @param supportFrequentI	support count for items to add
	 * @return	reference view
	 */
	@GetMapping("/addFrequentExercise")
	public String addFrequentExercise(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo,
			@RequestParam(value = "itemsFrequent", required = true) String itemsFrequent,
			@RequestParam(value = "supportFrequentI", required = true) int supportFrequentI

	) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.setNewFrequentRow(itemsFrequent, supportFrequentI);

		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNo.toString();
	}

	/**
	 * for deleting row of interim result
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNoD	id of the exercise process (uuid)
	 * @param itemsInterimD	items to delete
	 * @param supportInterimD	support count (items) to delete
	 * @param stepInterimD	stage in apriori algorithm
	 * @return	reference view
	 */
	@GetMapping("/deleteInterimExercise")
	public String deleteInterim(Model model,
			@RequestParam(value = "exerciseProcessNoD", required = true) String exerciseProcessNoD,
			@RequestParam(value = "itemsInterimD", required = true) String itemsInterimD,
			@RequestParam(value = "supportInterimD", required = true) int supportInterimD,
			@RequestParam(value = "stepInterimD", required = true) int stepInterimD) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNoD)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.deleteInterim(itemsInterimD, supportInterimD, stepInterimD);

		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNoD.toString();
	}

	/**
	 * for deleting row in frequent items
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNoD	id of the exercise process (uuid)
	 * @param itemsFrequentD	items to delete
	 * @param supportFrequentD	support count (items) to delete
	 * @return	reference view
	 */
	@GetMapping("/deleteFrequentExercise")
	public String deleteFrequent(Model model,
			@RequestParam(value = "exerciseProcessNoD", required = true) String exerciseProcessNoD,
			@RequestParam(value = "itemsFrequentD", required = false) String itemsFrequentD,
			@RequestParam(value = "supportFrequentD", required = false) int supportFrequentD

	) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNoD)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.deleteFrequent(itemsFrequentD, supportFrequentD);

		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNoD.toString();
	}

	/**
	 * for switching to next item set (L)
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/nextStepExercise")
	public String nextStepTraining(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.nextStep();

		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNo;
	}

	/**
	 * for switching to previous item set
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/lastStepExercise")
	public String lastStepTraining(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.lastStep();

		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNo;
	}

	/**
	 * for terminating/ evaluating apriori task
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/terminateAprioriExercise")
	public String terminateAprioriExercise(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.prepareCorretionList();

		exerciseService.prepareFrequentTableCorretion();

		model.addAttribute("points", exerciseService.calcPoints());

		model.addAttribute("exerciseService", exerciseService);

		return "aprioriExerciseEvaluation";
	}

	/**
	 * for opening rules task
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/rulesExercise")
	public String rulesTraining(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		model.addAttribute("ads", exerciseService.getHorizontalTable().getList());
		model.addAttribute("frequent", exerciseService.getFrequentTable());
		model.addAttribute("exerciseService", exerciseService);

		return "rulesExercise";
	}

	/**
	 * for adding a rule
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @param lhs	left hand side rule
	 * @param rhs	right hand side rule
	 * @param upper	upper part formula
	 * @param lower	lower part formula
	 * @param numerator	numerator fraction
	 * @param denominator	denominator fraction
	 * @param percent	confidence in percent
	 * @return	reference view
	 */
	@GetMapping("/addRuleExercise")
	public String addRuleTraining(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo,
			@RequestParam(value = "lhs", required = true) String lhs,
			@RequestParam(value = "rhs", required = true) String rhs,
			@RequestParam(value = "upper", required = true) String upper,
			@RequestParam(value = "lower", required = true) String lower,
			@RequestParam(value = "numerator", required = true) int numerator,
			@RequestParam(value = "denominator", required = true) int denominator,
			@RequestParam(value = "percent", required = true) int percent) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.addNewRule(lhs, rhs, upper, lower, numerator, denominator, percent);

		return "redirect:/rulesExercise?exerciseProcessNo=" + exerciseProcessNo;
	}

	/**
	 * for deleting rule
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNoDel	id of the exercise process (uuid)
	 * @param lhsDel	left hand side rule
	 * @param rhsDel	right hand side rule
	 * @param confUDel	upper part formula
	 * @param confLDel	lower part formula
	 * @param numDel	numerator fraction
	 * @param denDel	denominator fraction
	 * @param perDel	confidence in percent
	 * @return	reference view
	 */
	@GetMapping("/deleteRuleExercise")
	public String deleteRuleExercise(Model model,
			@RequestParam(value = "exerciseProcessNoDel", required = true) String exerciseProcessNoDel,
			@RequestParam(value = "lhsDel", required = true) String lhsDel,
			@RequestParam(value = "rhsDel", required = true) String rhsDel,
			@RequestParam(value = "confUDel", required = true) String confUDel,
			@RequestParam(value = "confLDel", required = true) String confLDel,
			@RequestParam(value = "numDel", required = true) Integer numDel,
			@RequestParam(value = "denDel", required = true) Integer denDel,
			@RequestParam(value = "perDel", required = true) Integer perDel) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNoDel)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.deleteRule(lhsDel, rhsDel, confUDel, confLDel, numDel, denDel, perDel);

		return "redirect:/rulesExercise?exerciseProcessNo=" + exerciseProcessNoDel;
	}

	/**
	 * for terminating/evaluating rules
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/rulesExerciseEvaluation")
	public String rulesExerciseEvaluation(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.prepareListRulesCorrection();

		exerciseService.calcPointsRules();

		model.addAttribute("exerciseService", exerciseService);
		model.addAttribute("points", exerciseService.getResultApriori());
		model.addAttribute("pointsRules", exerciseService.getResultRules());

		return "rulesExerciseEvaluation";
	}

	/**
	 * for saving result exercise
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/saveExerciseRules")
	public String saveExerciseRules(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.saveResult();

		repo.removeExercise(UUID.fromString(exerciseProcessNo));

		return "redirect:/sorry...?message=(Exercise saved.You still need to submit the exercise in the eTutor++. Exercise process closed.)";

	}

	/**
	 * for restarting rules task
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/restartExerciseRules")
	public String restartExerciseRules(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.cleanRulesLists();

		return "redirect:/rulesExercise?exerciseProcessNo=" + exerciseProcessNo;
	}

	/**
	 * for restarting exercise
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/restartExerciseApriori")
	public String restartExerciseApriori(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		exerciseService.cleanAprioriLists();

		return "redirect:/aprioriExercise?exerciseProcessNo=" + exerciseProcessNo;
	}

	/**
	 * for ending exercise process
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param exerciseProcessNo	id of the exercise process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/endExerciseExtension")
	public String endExerciseExtension(Model model,
			@RequestParam(value = "exerciseProcessNo", required = true) String exerciseProcessNo) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		ExerciseService exerciseService = repo.findExercise((UUID.fromString(exerciseProcessNo)));

		if (exerciseService == null) {
			return "redirect:/sorry...?message=(Exercise process not found)";
		}

		repo.removeExercise(UUID.fromString(exerciseProcessNo));

		return "redirect:/sorry...?message=(Exercise process closed)";
	}

}
