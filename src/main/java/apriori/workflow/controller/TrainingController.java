package apriori.workflow.controller;

import java.util.Map;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;

import apriori.logic.utility.AprioriException;
import apriori.logic.utility.DbUtility;
import static apriori.workflow.service.ExerciseService.checkInitialLink;

import apriori.workflow.service.TrainingService;
import apriori.workflow.user.management.TrainingParticipantService;

/**
 * controller class for training processes
 *
 */
@Controller
public class TrainingController {

	@Autowired
	TrainingParticipantService repo;

	/**
	 * for starting new training process
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param initalVar starting condition for training (generated by the eTutor++)
	 * @return reference view
	 */
	@GetMapping("/initiateNewTraining")
	public String initiateNewTraining(Model model,
			@RequestParam(value = "initalVar", required = false) String initalVar) {

		Map<String, String> map = DbUtility.decryptInitialVariableTraining(initalVar);

		if (map == null) {
			return "redirect:/sorry...?message=(Decryption failure)";
		}
		boolean check = checkInitialLink(map);
		if (check == false) {
			return "redirect:/sorry...?message=(Decryption failure)";
		}
		repo.cleanParticipants();
		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		UUID trainingProcessNo = repo.setupTraining();

		return "forward:/startNewTrainingSetup?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for preparing to setup new training
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/startNewTrainingSetup")
	public String newTrainingSetupR(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}
		trainingService.resetList();

		return "redirect:/newTrainingSetup?trainingProcessNo=" + trainingProcessNo;
	}

	/**
	 * for setting up initial setup view
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @param level difficulty level
	 * @return	reference view
	 */
	@GetMapping("/newTrainingSetup")
	public String newTrainingSetup(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo,
			@RequestParam(value = "level", required = false) String level) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		if (trainingService.checkDiff(level)) {
			try {
				trainingService.setDifficultyLevel(level);
			} catch (AprioriException e) {
				e.printStackTrace();
			}
		}

		return "redirect:/TrainingSetup?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for setting up a new training
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/TrainingSetup")
	public String studentTrainingSetup(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {
		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		model.addAttribute("trainingService", trainingService);
		model.addAttribute("TrainingService", TrainingService.class);

		return "newTrainingSetup";
	}

	/**
	 * for generating new training setup
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @param difficultyLevel	difficulty level of tasks
	 * @param noTransactionsLevel	number of transactions in data set
	 * @param avItemsLevel	number of available items to generate row from
	 * @param maxItemsLevel	maximum number of items in a row
	 * @param minItemsLevel	minimum number of items in a row
	 * @param minSupportLevel	minimum support for the apriori algorithm
	 * @param noRulesLevel	number of items to derive a rule 
	 * @param askRulesLevel	number of rules queried 
	 * @param minConfidenceLevel	minimum confidence for rules
	 * @param types	type of data set
	 * @return	reference view
	 */
	@GetMapping("/newTrainingDataset")
	public String studentTrainingSetup(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo,
			@RequestParam(value = "difficultyLevel", required = true) String difficultyLevel,
			@RequestParam(value = "noTransactionsLevel", required = true) int noTransactionsLevel,
			@RequestParam(value = "avItemsLevel", required = true) int avItemsLevel,
			@RequestParam(value = "maxItemsLevel", required = true) int maxItemsLevel,
			@RequestParam(value = "minItemsLevel", required = true) int minItemsLevel,
			@RequestParam(value = "minSupportLevel", required = true) int minSupportLevel,
			@RequestParam(value = "noRulesLevel", required = true) int noRulesLevel,
			@RequestParam(value = "askRulesLevel", required = true) int askRulesLevel,
			@RequestParam(value = "minConfidenceLevel", required = true) int minConfidenceLevel,
			@RequestParam(value = "types", required = true) String types) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.generateNewDataset(noTransactionsLevel, avItemsLevel, maxItemsLevel, minItemsLevel,
				minSupportLevel, noRulesLevel, askRulesLevel, minConfidenceLevel, types);

		trainingService.setParams(noTransactionsLevel, avItemsLevel, maxItemsLevel, minItemsLevel, minSupportLevel,
				noRulesLevel, askRulesLevel, minConfidenceLevel, types);

		trainingService.calculateTasks();

		return "redirect:/newTrainingDatasetView?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for viewing new training
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/newTrainingDatasetView")
	public String newTrainingDatasetView(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		model.addAttribute("difficultyLevel", trainingService.getDifficultyLevel());
		model.addAttribute("noTransactionsLevel", trainingService.getNoTransactionsLevel());
		model.addAttribute("avItemsLevel", trainingService.getAvItemsLevel());
		model.addAttribute("maxItemsLevel", trainingService.getMaxItemsLevel());
		model.addAttribute("minItemsLevel", trainingService.getMinItemsLevel());
		model.addAttribute("minSupportLevel", trainingService.getMinSupportLevel());
		model.addAttribute("noRulesLevel", trainingService.getNoRulesLevel());
		model.addAttribute("askRulesLevel", trainingService.getAskRulesLevel());
		model.addAttribute("minConfidenceLevel", trainingService.getMinConfidenceLevel());
		model.addAttribute("types", trainingService.getTypeDatasetLevel());
		model.addAttribute("askRulesLevelT", trainingService.getAskRulesLevel());
		model.addAttribute("ads", trainingService.getHorizontalTable().getList());
		model.addAttribute("trainingProcessNo", trainingProcessNo);
		model.addAttribute("totalNumberOfRules", trainingService.getRulesDerived().getRules().size());
		model.addAttribute("fp", trainingService.getFrequentPatternForRules());

		model.addAttribute("trainingService", trainingService);

		return "newTrainingDataset";
	}

	/**
	 * for doing training
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/aprioriTraining")
	public String aprioriTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		model.addAttribute("trainingProcessNo", trainingProcessNo);
		model.addAttribute("ads", trainingService.getHorizontalTable().getList());
		model.addAttribute("availableItems", trainingService.getAvailableItems());
		model.addAttribute("stepNumber", trainingService.getStepNumber());
		model.addAttribute("interimList", trainingService.getTrainingList());
		model.addAttribute("frequentList", trainingService.getFrequentTable());
		model.addAttribute("trainingService", trainingService);
		model.addAttribute("TS", TrainingService.class);

		return "aprioriTraining";
	}

	/**
	 * for adding new row for interim result
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @param itemsInterim	items to add
	 * @param supportInterimI	support count for items to add
	 * @return	reference view
	 */
	@GetMapping("/addInterimTraining")
	public String addInterimTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo,
			@RequestParam(value = "itemsInterim", required = false) String itemsInterim,
			@RequestParam(value = "supportInterimI", required = false) int supportInterimI

	) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.setNewInterimRow(itemsInterim, supportInterimI);

		return "redirect:/aprioriTraining?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for adding new frequent items row
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @param itemsFrequent	items to add
	 * @param supportFrequentI	support count for items to add
	 * @return	reference view
	 */
	@GetMapping("/addFrequentTraining")
	public String addFrequentTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo,
			@RequestParam(value = "itemsFrequent", required = false) String itemsFrequent,
			@RequestParam(value = "supportFrequentI", required = false) int supportFrequentI

	) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.setNewFrequentRow(itemsFrequent, supportFrequentI);

		return "redirect:/aprioriTraining?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for deleting row interim result
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNoD	id of the training process (uuid)
	 * @param itemsInterimD	items to delete
	 * @param supportInterimD	support count (items) to delete
	 * @param stepInterimD	stage in apriori algorithm
	 * @return	reference view
	 */
	@GetMapping("/deleteInterimTraining")
	public String deleteInterim(Model model,
			@RequestParam(value = "trainingProcessNoD", required = true) String trainingProcessNoD,
			@RequestParam(value = "itemsInterimD", required = false) String itemsInterimD,
			@RequestParam(value = "supportInterimD", required = false) int supportInterimD,
			@RequestParam(value = "stepInterimD", required = false) int stepInterimD) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNoD));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.deleteInterim(itemsInterimD, supportInterimD, stepInterimD);

		return "redirect:/aprioriTraining?trainingProcessNo=" + trainingProcessNoD.toString();
	}

	/**
	 * for deleting frequent items row
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNoD	id of the training process (uuid)
	 * @param itemsFrequentD	items to delete
	 * @param supportFrequentD	support count (items) to delete
	 * @return	reference view
	 */
	@GetMapping("/deleteFrequentTraining")
	public String deleteFrequent(Model model,
			@RequestParam(value = "trainingProcessNoD", required = true) String trainingProcessNoD,
			@RequestParam(value = "itemsFrequentD", required = false) String itemsFrequentD,
			@RequestParam(value = "supportFrequentD", required = false) int supportFrequentD

	) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNoD));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.deleteFrequent(itemsFrequentD, supportFrequentD);

		return "redirect:/aprioriTraining?trainingProcessNo=" + trainingProcessNoD.toString();
	}

	/**
	 * for increasing items set number
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/nextStepTraining")
	public String nextStepTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.nextStep();

		return "redirect:/aprioriTraining?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for previous item set
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/lastStepTraining")
	public String lastStepTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.lastStep();

		return "redirect:/aprioriTraining?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for terminating/ evaluating apriori task
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/terminateTraining")
	public String terminate(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.prepareCorretionList();

		model.addAttribute("correctionList", trainingService.getCorrectionList());

		trainingService.prepareFrequentTableCorretion();

		model.addAttribute("frequentCorrection", trainingService.getFrequentTableCorretion());
		model.addAttribute("trainingProcessNo", trainingProcessNo);
		model.addAttribute("trainingService", trainingService);
		model.addAttribute("points", trainingService.calcPoints());

		return "aprioriTrainingEvaluation";
	}

	/**
	 * for viewing detailed solution apriori task
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/detailedSolutionTraining")
	public String detailedSolutionTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		model.addAttribute("trainingProcessNo", trainingProcessNo);
		model.addAttribute("apriori", trainingService.getApriori());
		model.addAttribute("fp", trainingService.getApriori().getFrequentPattern().getFrequentPatterns());
		model.addAttribute("trainingService", trainingService);

		return "aprioriTrainingDetails";
	}

	/**
	 * for rules task training
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/rulesTraining")
	public String rulesTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		model.addAttribute("trainingProcessNo", trainingProcessNo);
		model.addAttribute("minConfidence", trainingService.getMinConfidenceLevel());
		model.addAttribute("rulesList", trainingService.getListRulesStudent());
		model.addAttribute("rulesList", trainingService.getListRulesStudent());
		model.addAttribute("availableItems", trainingService.getAvailableItems());
		model.addAttribute("ads", trainingService.getHorizontalTable().getList());
		model.addAttribute("frequent", trainingService.getFrequentTable());

		model.addAttribute("trainingService", trainingService);

		model.addAttribute("TS", TrainingService.class);

		return "rulesTraining";
	}

	/**
	 * for adding a rule training
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @param lhs	left hand side rule
	 * @param rhs	right hand side rule
	 * @param upper	upper part formula
	 * @param lower	lower part formula
	 * @param numerator	numerator fraction
	 * @param denominator	denominator fraction
	 * @param percent	confidence in percent
	 * @return	reference view
	 */
	@GetMapping("/addRuleTraining")
	public String addRuleTraining(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo,
			@RequestParam(value = "lhs", required = false) String lhs,
			@RequestParam(value = "rhs", required = false) String rhs,
			@RequestParam(value = "upper", required = false) String upper,
			@RequestParam(value = "lower", required = false) String lower,
			@RequestParam(value = "numerator", required = false) int numerator,
			@RequestParam(value = "denominator", required = false) int denominator,
			@RequestParam(value = "percent", required = false) int percent) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.addNewRule(lhs, rhs, upper, lower, numerator, denominator, percent);

		return "redirect:/rulesTraining?trainingProcessNo=" + trainingProcessNo.toString();
	}

	/**
	 * for deleting a rule
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNoDel	id of the training process (uuid)
	 * @param lhsDel	left hand side rule
	 * @param rhsDel	right hand side rule
	 * @param confUDel	upper part formula
	 * @param confLDel	lower part formula
	 * @param numDel	numerator fraction
	 * @param denDel	denominator fraction
	 * @param perDel	confidence in percent
	 * @return	reference view
	 */
	@GetMapping("/deleteRuleTraining")
	public String deleteRuleTraining(Model model,
			@RequestParam(value = "trainingProcessNoDel", required = true) String trainingProcessNoDel,
			@RequestParam(value = "lhsDel", required = true) String lhsDel,
			@RequestParam(value = "rhsDel", required = true) String rhsDel,
			@RequestParam(value = "confUDel", required = true) String confUDel,
			@RequestParam(value = "confLDel", required = true) String confLDel,
			@RequestParam(value = "numDel", required = true) Integer numDel,
			@RequestParam(value = "denDel", required = true) Integer denDel,
			@RequestParam(value = "perDel", required = true) Integer perDel) {

		repo.cleanParticipants();

		if (!repo.capacityCheck()) {
			return "capacityOverload";
		}

		TrainingService trainingService = repo.findTraining((UUID.fromString(trainingProcessNoDel)));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.deleteRule(lhsDel, rhsDel, confUDel, confLDel, numDel, denDel, perDel);

		return "redirect:/rulesTraining?trainingProcessNo=" + trainingProcessNoDel.toString();
	}

	/**
	 * for terminating/ evaluating rules task
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/rulesTrainingEvaluation")
	public String rulesTrainingEvaluation(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		trainingService.prepareListRulesCorrection();

		trainingService.calcPointsRules();

		model.addAttribute("trainingProcessNo", trainingProcessNo);
		model.addAttribute("listRuleCorrection", trainingService.getListRulesCorrection());

		model.addAttribute("points", trainingService.getResultApriori());
		model.addAttribute("pointsRules", trainingService.getResultRules());

		model.addAttribute("trainingService", trainingService);

		return "rulesTrainingEvaluation";
	}

	/**
	 * for restarting training
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/cleaningProcessList")
	public String cleaningProcessList(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		repo.removeTraining(UUID.fromString(trainingProcessNo));

		return "redirect:/initiateNewTraining";
	}

	/**
	 * for ending training process
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param trainingProcessNo	id of the training process (uuid)
	 * @return	reference view
	 */
	@GetMapping("/endExtension")
	public String endExtension(Model model,
			@RequestParam(value = "trainingProcessNo", required = true) String trainingProcessNo) {

		TrainingService trainingService = repo.findTraining(UUID.fromString(trainingProcessNo));

		if (trainingService == null) {
			return "redirect:/sorry...?message=(Training process not found)";
		}

		repo.removeTraining(UUID.fromString(trainingProcessNo));

		return "redirect:/sorry...?message=(Training process closed)";
	}

	/**
	 * for showing 'technical' message
	 * 
	 * @param model	required by framework to render data inside a view
	 * @param message message to user
	 * @return	reference view
	 */
	@GetMapping("/sorry...")
	public String sorry(Model model, @RequestParam(value = "message", required = false) String message) {
		model.addAttribute("message", message);
		return "restart";
	}

}
